<!DOCTYPE html>
<html>

<head>
    <title>Tripathi Bioinformatics</title>
    <link rel="stylesheet" href="https://use.typekit.net/azy2ine.css">
    <link rel='stylesheet' href='/stylesheets/pipeline.css' />
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel='stylesheet' href='/stylesheets/dna-pipeline.css' />
</head>

<body>
    <!-- Toolbar -->
    <%- include('partials/toolbar') %>

    <div class="timeline_content">
        <h1>Recommended Pipeline</h1>
        <h3 style="color:black;">Edit your timeline if necessary:</h3>

        <form id="dnaPipelineForm" action="/running" method="post">
            <% Categories.forEach(category => { %>
                <button type="button" class="collapsible" onclick="toggleCollapsible('section_<%= category.title %>')">
                    <h3><%= category.title %></h3>
                </button>

                <div class="content" id="section_<%= category.title %>">
                    <% for (let j = 0; j < category.entries.length; j++) { %>
                        <% if (category.title === "File Processing" && infoSteps[j] === 0) { continue; } %>
                        <% let key = category.entries[j]; %>
                        <% let entry = Executables.get(key); %>

                        <div>
                            <label>
                                <div style="display: flex;">
                                    <input type="range" min="0" max="1" step="1" value="<%= entry.isEnabled ? 1 : 0 %>" name="slider_<%= key %>">
                                    <h4 class="category_labels"><%= entry.title %></h4>
                                </div>
                            </label>

                            <% if (entry.parameters.length === 0) { %>
                                </div>
                                <% continue; } %>

                            <div id="options_<%= key %>" class="options-container <%= entry.isEnabled ? '' : 'hidden' %>">
                                <% entry.parameters.forEach(parameter => { %>
                                    <div style="display: flex;">
                                        <label for="<%= parameter.title %>"><%= parameter.title %>:</label>
                                        <% if (parameter.type === "number") { %>
                                            <input class="option_input" type="number" id="<%= parameter.title %>" value="<%= parameter.value %>">
                                        <% } else if (parameter.type === "checkbox") { %>
                                            <!-- NOTE: Not using this anymore -->
                                            <input class="option_input" type="checkbox" id="<%= parameter.title %>" <% if (parameter.value) { %>checked<% } %>>
                                        <% } else if (parameter.type === "upload") { %>
                                            <!-- NOTE: Not using this anymore -->
                                            <input class="option_input" type="file" id="<%= parameter.title %>">
                                            <button type="button" onclick="uploadParameterFile('<%= parameter.title %>')"></button>
                                        <% } else if (parameter.type === "text") { %>
                                            <input class="option_input" type="text" id="<%= parameter.title %>" value="<%= parameter.value %>">
                                        <% } else { %>
                                            <select class="option_input" id="<%= parameter.title %>">
                                                <% parameter.options.forEach((option, index) => { %>
                                                    <option value="<%= index %>" <% if (option[1] === parameter.value) { %>selected<% } %>> <%= option[0] %> </option>
                                                <% }) %>
                                            </select>
                                        <% } %>
                                    </div>
                                <% }) %>
                                <button type="button" class="save-btn" onclick="saveButton('<%= key %>')">Save</button>
                            </div>

                            <div id="options_display_<%= key %>" class="options-display hidden">
                                <% entry.parameters.forEach(parameter => { %>
                                    <div style="display: flex;">
                                        <p style="color: #b985d9;"><%= parameter.title %>:</p>
                                        <p style="margin-left: 1rem;" id="option_<%= parameter.title %>_display"></p>
                                    </div>
                                <% }) %>
                                <button type="button" onclick="editButton('<%= key %>')" class="edit-btn">Edit</button>
                            </div>
                        </div>
                    <% } %>
                </div>
            <% }) %>

            <%- '<script>' %>
                const form = document.getElementById('dnaPipelineForm');
        
                let Executables = new Map(JSON.parse('<%- JSON.stringify(Array.from(Executables.entries())) %>'));
        
                function saveButton(key) {
                    let changingEntry = Executables.get(key);
                    let parameters = changingEntry.parameters;
                    for (let parameter of parameters) {
                        let optionInput = document.getElementById(parameter.title);
                        let optionDisplayTag = document.getElementById('option_' + parameter.title + '_display');
                        switch (parameter.type) {
                            case "number":
                                parameter.value = optionInput.value.toString();
                            case "text":
                                parameter.value = optionInput.value;
                                optionDisplayTag.innerText = optionInput.value.toString();
                                break;
                            case "checkbox":
                                // NOTE: not using this anymore
                                // newValue = optionInput.checked;
                                break;
                            case "select":
                                parameter.value = parameter.options[optionInput.value][1];
                                optionDisplayTag.innerText = parameter.options[optionInput.value][0];
                                break;
                            case "upload":
                                // NOTE: not using this anymore
                                continue;
                            default:
                                console.log("Not a valid input type");
                        }
                        // parameter.value = newValue.toString();
                        // optionDisplayTag.innerText = newValue.toString();
                    };
                    Executables.set(key, {
                        isEnabled: changingEntry.isEnabled,
                        title: changingEntry.title,
                        checkFile: changingEntry.checkFile,
                        environment: changingEntry.environment,
                        specialCase: changingEntry.specialCase,
                        parameters: parameters,
                        command: changingEntry.command,
                        downloadables: changingEntry.downloadables,
                    });
                    // executable.parameters.set(key, parameters); // Will not doing this prevent proper updating? it's not a map this time
        
                    let optionsDiv = document.getElementById('options_' + key);
                    let displayDiv = document.getElementById('options_display_' + key);
                    optionsDiv?.classList.add('hidden');
                    displayDiv?.classList.remove('hidden');
                }
        
                function editButton(key) {
                    let optionsDiv = document.getElementById('options_' + key);
                    let displayDiv = document.getElementById('options_display_' + key);
                    displayDiv?.classList.add('hidden');
                    optionsDiv?.classList.remove('hidden');
                }
        
                form.addEventListener('change', function (event) {
                    if (event.target.type === 'range') {
                        const sliderName = event.target.name;
                        const key = sliderName.split('_')[1];
                        changingEntry = Executables.get(key);
                        Executables.set(event.target.name, {
                            isEnabled: event.target.checked,
                            title: changingEntry.title,
                            checkFile: changingEntry.checkFile,
                            environment: changingEntry.environment,
                            specialCase: changingEntry.specialCase,
                            parameters: changingEntry.parameters,
                            command: changingEntry.command,
                            downloadables: changingEntry.downloadables,
                        });
        
                        let optionsDiv = document.getElementById('options_' + key);
                        let displayDiv = document.getElementById('options_display_' + key);
        
                        if (Executables.get(key).isEnabled) {
                            displayDiv?.classList.remove('hidden');
                        } else {
                            optionsDiv?.classList.add('hidden');
                            displayDiv?.classList.add('hidden');
                        }
                    }
                });
        
                form.addEventListener('submit', function (event) {
                    event.preventDefault();
                    document.querySelector('[name="Executables"]').value = JSON.stringify(Array.from(Executables.entries()));

                    form.submit();
                });
        
                function toggleCollapsible(sectionId) {
                    const collapsibleContent = document.getElementById(sectionId);
                    collapsibleContent.classList.toggle('active');
                }
                <%- '</script>' %>

            <input type="hidden" name="Executables">
            <button class="pipeline_continue_button"><h3 style="color: black">Continue</h3></button>
        </form>
    </div>
</body>

</html>
