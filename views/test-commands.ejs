<!DOCTYPE html>
<html>

<head>
    <title>Tripathi Bioinformatics</title>
    <link rel="stylesheet" href="https://use.typekit.net/azy2ine.css">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <style>
        .input_type_buttons {
            width: 10rem;
            height: 4rem;
            border: none;
            border-radius: 1rem;
            background-color: #FFEB0F;
            cursor: pointer;
        }

        .input_type_buttons:hover {
            transition: 0.3s;
            background-color: goldenrod;
        }

        .centered {
            /* display: flex;
            flex-direction: column;
            align-items: center; */
            padding: 4% 8%;
            max-width: 75%;
        }

        .confirm_button {
            border: none;
            border-radius: 5px;
            padding: 5px;
            background-color: #7F03B0;
            color: white;
            cursor: pointer;
        }

        .continue_button {
            border: none;
            border-radius: 10px;
            padding: 10px;
            background-color: #FFEB0F;
            cursor: pointer;
        }

        .continue_button:disabled {
            background-color:rgb(185, 183, 166);
            cursor: not-allowed;
        }

        h3{
            color: black;
        }
    </style>
</head>

<body>
    <!-- Toolbar -->
    <%- include('partials/toolbar') %>

    <div class="centered">
        <h1>Test Commands</h1>
        
        <br>

        <!-- Upload Files -->
        <section id="file_uploader_section" >
            <h3>Upload File(s)</h3>
            <br>
            <form id="mainFileForm" enctype="multipart/form-data">
                <input type="file" name="file" id="Main_File_Uploader">
                <button class="confirm_button" type="button" onclick="processMainFile()">Confirm</button>
            </form>
            <br>
        </section>

        <button onclick="runBAMStuff('/sort-bam-file')">Sort BAM</button>
        <button onclick="runBAMStuff('/index-bam-file')">Index BAM</button>
        <button onclick="runBAMStuff('/add-or-replace-read-groups')">Add or Replace RG</button>
        <button onclick="runBAMStuff('/bam-index-stats')">BAM Index Stats</button>
        <button onclick="runBAMStuff('/alignment-summary')">Alignment Summary</button>
        <button onclick="runBAMStuff('/gc-bias-summary')">GC Bias Summary / Graph</button>
        <button onclick="runBAMStuff('/insert-size-data')">Insert Size Summary / Graph</button>
        <button onclick="runBAMStuff('create-seq-dict')">Create Sequence Dictionary</button>
        <button onclick="runBAMStuff('/mark-remove-duplicates')">Mark Duplicates / Remove Duplicates</button>
        <button onclick="runBAMStuff('/flag-stats')">Flag Stats</button>
        <button onclick="runBAMStuff('/seq-depth')">Sequencing Depth</button>
        <button onclick="runBAMStuff('/seq-coverage')">Sequencing Coverage</button>

        <!-- <button onclick="runBAMStuff('/sort-bam-file')">Sort BAM</button>
        <button onclick="runIndexBAM('/index-bam-file')">Index BAM</button>
        <button onclick="runRG('/add-or-replace-read-groups')">Add or Replace RG</button>
        <button onclick="runBAMIndexStats('/bam-index-stats')">BAM Index Stats</button>
        <button onclick="runAlignmentSummary('/alignment-summary')">Alignment Summary</button>
        <button onclick="runGCBias('/gc-bias-summary')">GC Bias Summary / Graph</button>
        <button onclick="runInsertSize('/insert-size-data')">Insert Size Summary / Graph</button>
        <button onclick="runCreateSequence()">Create Sequence Dictionary</button>
        <button onclick="runMarkDuplicates()">Mark Duplicates / Remove Duplicates</button>
        <button onclick="runFlagStats()">Flag Stats</button>
        <button onclick="runSequencingDepth()">Sequencing Depth</button>
        <button onclick="runSequencingCoverage()">Sequencing Coverage</button> -->
        
    </div>


    <!-- ... LOGIC ... -->
    <script>

        let uploadedFile;

        //#region ... REFERENCES ... 

        // Get referneces to the sections
        const fileSection = document.getElementById('file_uploader_section');
        const adapterSection = document.getElementById('adapter_section');
        const rnaSection = document.getElementById('rna_section');

        // Get references to the upload button and the file information text
        const Main_File_Uploader = document.getElementById('Main_File_Uploader');
        const typeDropdown = document.getElementById('directoryOption');

        // Get references to the Adapter objects
        hasAdapters = false;
        const ACHeading = document.getElementById('adapterCheckHeading');
        const adapterFileInput = document.getElementById('Adapter_File_Uploader');
        const adapterUploadButton = document.getElementById('adapterUploadButton');

        // Get a reference to the Genome objects
        const genomeTypeInfo = document.getElementById('genomeTypeInfo');

        // Get a reference to the continue button
        const continue_button = document.getElementById('file_info_continue_button');

        //#endregion

        /** @ processMainFile
         * Test version just stores the file
         */
        function processMainFile() {

            // Make sure they only uploaded one file
            if (Main_File_Uploader.files.length > 1) {
                console.log('Please select only one file.');
                return;
            }

            // If the file somehow doesn't exist, abort process
            uploadedFile = Main_File_Uploader.files[0];
            if (!uploadedFile) {
                return;
            }

            // Store it
            storeFiles(Main_File_Uploader.files)
                .then(fileStorage => {
                    uploadedFilePath = fileStorage.storedPath;
                })
                .catch(error => {
                    // Handle any errors
                    console.error('Error analyzing file:', error);
                });
        }

        /** @ storeFiles
         * 
         * Takes in the files to be stored
         * 
         * Returns:
         *      - a path to the files in storage
        */
        function storeFiles(files) {
            const fileFormData = new FormData();

            for (const file of files) {
                fileFormData.append('files', file);
            }

            return new Promise((resolve, reject) => {
                // Make an asynchronous request to the server using the Fetch API
                fetch('/store-files', {
                    method: 'POST',
                    body: fileFormData,
                })
                    .then(response => response.json()) // Assume the server sends JSON data
                    .then(data => {
                        // Store the path to it
                        resolve({storedPath: data.storedPath});
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        reject(error);
                    });
            });
        }

        // @ runFastQC
        // This function takes in a fastQ file and runs fastQC on that file
        // Returns:
        //      - a string that is the path to the directory holding the results of the FastQC process
        //      - a boolean that indicates whether the adapter is trimmed
        //      - a boolean that indicates wether the fastQ file is demultiplexed
        function runFastQC () {
            fastQFile = Main_File_Uploader.files[0];

            const formData = new FormData();
            formData.append('file', fastQFile);

            return new Promise((resolve, reject) => {
                // Make an asynchronous request to the server using the Fetch API
                fetch('/run-fastqc', {
                    method: 'POST',
                    body: formData,
                })
                    .then(response => response.json()) // Assume the server sends JSON data
                    .then(data => {
                        // return the results, the Adapter Trim bool and the multiplexed bool based on the response
                        resolve({ results: data.results, trimmed: data.trimmed, demultiplexed: data.demultiplexed });
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        reject(error);
                    });
            });
        }

        // Runs the command i give it with the BAM file uploaded
        function runBAMStuff (func_to_call) {
            BAMFile = Main_File_Uploader.files[0];
            const formData = new FormData();
            formData.append('file', BAMFile);
            formData.append('ref', 'Pig');

            return new Promise((resolve, reject) => {
                // Make an asynchronous request to the server using the Fetch API
                fetch(func_to_call, {
                    method: 'POST',
                    body: formData,
                })
                    .then(response => response.json()) // Assume the server sends JSON data
                    .then(data => {
                        // return the results, the Adapter Trim bool and the multiplexed bool based on the response
                        resolve({ results: data.results });
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        reject(error);
                    });
            });
        }


    </script>

</body>

</html>