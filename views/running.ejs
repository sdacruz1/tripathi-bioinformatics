<!DOCTYPE html>
<html>

<head>
    <title>Tripathi Bioinformatics</title>
    <link rel="stylesheet" href="https://use.typekit.net/azy2ine.css">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <style>
        .running_content {
            padding: 4% 8%;
            max-width: 75%;
            text-align: left;
        }

        .info_box {
            border: 4px solid #7F03B0;
            border-radius: 10px;
            padding: 1rem;
            margin-left: 2rem;
            max-width: 80%;
        }

        .status_img {
            width: 2rem;
            height: 2rem;
        }
    </style>
</head>

<body>
    <!-- Toolbar -->
    <%- include('partials/toolbar') %>

    <div class="running_content">
    <h1>Running Your Generated Timeline</h1>
    <h3 style="color: black">Please wait.</h3>

    <h4>Your Timeline:</h4>

    <% Executables.forEach((executable, key) => { %>
        <% if (!executable.isEnabled) { return; } %>
        <div style="display: flex;">
            <div style="width: 4rem; margin-right: 1rem;" >
                <img class="status_img" id="status_img_<%= key %>" src="../images/Unchecked_Circle.png">
                <h3 class="status_text_none" id="status_text_<%= key %>">Waiting</h3>
            </div>
            <div class="info_box">
                <h3>
                    <%= executable.title %>
                </h3>

                <div id="selections_display_<%= key %>" class="selections-display hidden">
                    <!-- Display selections -->
                    <% executable.parameters.forEach(parameter => { %>
                        <div style="display: flex;">
                        <p style="color: #b985d9;"> <%= parameter.title %>: </p>
                        <% 
                        let displayValue = parameter.value;
                        if (parameter.type === "select") {
                            for (let i = 0; i < parameter.options.entries.length; i++) {
                                let option = parameter.options[i];
                                if (option[1] != parameter.value) {
                                    continue;
                                }
                                displayValue = option[0];
                                break;
                                }
                        } %>
                        <p style="margin-left: 1rem;" id="option_<%= parameter.title %>_display"><%= displayValue %></p>
                        <br></div>
                    <% }) %>
                </div>
            </div>
        </div>
        <br>
    <% }) %>

    <form id="runningForm" action="/output" method="post">
        <button class="continue_button"><h3 style="color: black" disabled>Continue</h3></button>
    </form>

    </div>

    <!-- Add a script that does each category item by item and sets the status_img and status_text class and fields as it completes -->
    <!-- <script src="/scripts/runCommands.js"></script> -->
     <script>

        // Set Status
        function setStatus(key, status) {
            const imageElement = document.getElementById(`status_img_${key}`);
            const textElement = document.getElementById(`status_text_${key}`);

            if (imageElement === null || textElement === null) {
                return;
            }

            switch (status) {
                case 'running':
                    imageElement.src = "../images/Hourglass.png";
                    textElement.textContent = 'Running';
                    break;
                case 'done':
                    imageElement.src = '../images/Checked_Circle.png';
                    textElement.textContent = 'Done';
                    break;
                default:
                    // Handle unknown status
                    break;
            }
        }

        // Make Request
        const MakeRequest = (executable, key) => {
            return new Promise((resolve) => {
                let formData = new FormData();
                // formData.append('Executable', executable);
                formData.append('key', key);

                fetch('/run-command', {
                    method: 'POST',
                    body: formData,
                })
                    .then(response => {
                        if (!response.ok) {
                        // If response is not OK, throw an error with the status text
                        throw new Error(`HTTP error! Status: ${response.status} ${response.statusText}`);
                        }
                        // Assume the server sends JSON data
                        return response.json();
                    })
                    .then(data => {
                        // Handle Response
                        console.log(executable.title + ' response:', data);
                        setStatus(key, 'done');
                        resolve(10);
                    })
                    .catch(error => {
                        // Handle the error more gracefully
                        console.error('Error with ' + executable.title + ' :', error);
                        setStatus(key, 'error');
                        resolve(0);
                    });
            });
        };

        // Call RunCommands the first time
        document.addEventListener('DOMContentLoaded', function() {
            // The DOM content has been fully loaded, including stylesheets, images, etc.
            console.log('View content has finished rendering');
            // Call your function here
            runCommands();
        });

        function runCommands() {
            let Executables = new Map(JSON.parse('<%- JSON.stringify(Array.from(Executables.entries())) %>'));

            try {
                Executables.forEach(async (executable, key) => {
                    if (executable.isEnabled) {
                        await MakeRequest(executable, key);
                    }
                })
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }
     </script>

</body>

</html>