<!DOCTYPE html>
<html>

<head>
    <title>Tripathi Bioinformatics</title>
    <link rel="stylesheet" href="https://use.typekit.net/azy2ine.css">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <style>
        .input_type_buttons {
            width: 10rem;
            height: 4rem;
            border: none;
            border-radius: 1rem;
            background-color: khaki;
            cursor: pointer;
        }

        .input_type_buttons:hover {
            transition: 0.3s;
            background-color: goldenrod;
        }

        .centered {
            /* display: flex;
            flex-direction: column;
            align-items: center; */
            padding: 4% 8%;
            max-width: 75%;
        }

        .confirm_button {
            border: none;
            border-radius: 5px;
            padding: 5px;
            background-color: #02598A;
            color: white;
            cursor: pointer;
        }

        .continue_button {
            border: none;
            border-radius: 10px;
            padding: 10px;
            background-color: khaki;
            cursor: pointer;
        }

        .continue_button:disabled {
            background-color:rgb(185, 183, 166);
            cursor: not-allowed;
        }

        h3{
            color: black;
        }
    </style>
</head>

<body>
    <!-- Toolbar -->
    <%- include('partials/toolbar') %>

    <div class="centered">
        <h1>Upload Files</h1>
        
        <br>

        <!-- Input Type Buttons -->
        <h3>Select an Input Type</h3>
        <div>
            <button onclick="select_input_type('DNA')" class="input_type_buttons">
                <h3 style="color: black;">DNA</h3>
            </button>
            <button onclick="select_input_type('RNA')" class="input_type_buttons">
                <h3 style="color: black;">RNA</h3>
            </button>
        </div>

        <br>

        <!-- Upload Main Files -->
        <section id="file_uploader_section" hidden>
            <h3>Upload File(s)</h3>
            <br>
            <form id="mainFileForm" enctype="multipart/form-data">
                <select id="directoryOption" onchange="changeInputType()">
                    <option value="BCL">BCL</option>
                    <option value="other">Other</option>
                  </select>
                <input type="file" name="file" id="Main_File_Uploader" webkitdirectory multiple disabled>
                <button class="confirm_button" type="button" onclick="processMainFile()">Confirm</button>
            </form>
            <p id="fileTypeInfo"></p>
            <br>
        </section>

        <!-- Upload Adapter Files -->
        <h3 id="adapterCheckHeading"></h3>
        <section id="adapter_section" hidden>
            <br>
            <form id="adapterFileForm" action="/adapter-file-upload" method="post" enctype="multipart/form-data">
                <input type="file" name="file" id="Adapter_File_Uploader" multiple disabled>
                <button class="confirm_button" id="adapterUploadButton" type="submit">Confirm</button>
            </form>
            <br>
        </section>

        <!-- Upload RNA Genome Files (Optional) -->
        <section id="rna_section" hidden>
            <h3>Reference Genome/Transcriptome</h3>
            <br>
            <form id="genomeFileForm" enctype="multipart/form-data">
                <input type="file" name="file" id="RNA_Genome_Uploader" multiple disabled>
                <button class="confirm_button" type="button" onclick="processGenomeFile()">Confirm</button>
            </form>
            <p id="genomeTypeInfo"></p>
            <br>
        </section>

        <!-- Continue Button -->
        <form id="continueForm" action="/dna-goalposts" method="post">
            <!-- Hidden input fields for variables -->
            <input type="hidden" name="infoSteps" id="infoStepsInput">
            <input type="hidden" name="uploadedFile" id="uploadedFileInput">
            <input type="hidden" name="uploadedFileType" id="uploadedFileTypeInput">
        
            <!-- Continue button -->
            <button type="button" class="continue_button" id="file_info_continue_button" disabled onclick="submitForm()">
                <h3>Continue</h3>
            </button>
        </form>
    </div>


    <!-- ... LOGIC ... -->
    <script>

        let InfoSteps = [0, 0, 0, 0, 0, 0];
        let uploadedFilePath = "";
        let UploadedFileType = "";

        let uploadedFile;

        // ... INPUT TYPE BUTTONS ... //

        // Define the input type
        let input_type = '';

        // Get references to the buttons and the RNA Genome Uploader
        const RNA_Genome_Uploader = document.getElementById('RNA_Genome_Uploader');

        // Get referneces to the sections
        const fileSection = document.getElementById('file_uploader_section');
        const adapterSection = document.getElementById('adapter_section');
        const rnaSection = document.getElementById('rna_section');

        // Get references to the upload button and the file information text
        const Main_File_Uploader = document.getElementById('Main_File_Uploader');
        const fileTypeCheck = document.getElementById('fileTypeInfo');
        const typeDropdown = document.getElementById('directoryOption');


        // INPUT TYPE BUTTONS

        function select_input_type(type) {
            input_type = type;
            Main_File_Uploader.disabled = false;
            RNA_Genome_Uploader.disabled = true;
            fileSection.hidden = false;
            if (type == 'RNA') {
                rnaSection.hidden = false;
            } else {
                rnaSection.hidden = true;
            }
        };


        // ... MAIN FILE UPLOADER ... //

        // Get the Adapter objects
        hasAdapters = false;
        const ACHeading = document.getElementById('adapterCheckHeading');
        const adapterFileInput = document.getElementById('Adapter_File_Uploader');
        const adapterUploadButton = document.getElementById('adapterUploadButton');

        // Get the Genome objects
        const genomeTypeInfo = document.getElementById('genomeTypeInfo');

        // Get the continue button
        const continue_button = document.getElementById('file_info_continue_button');

        // Function to change main file input type based on dropdown selection
        function changeInputType() {

            if (typeDropdown.value === 'BCL') {
                Main_File_Uploader.setAttribute('webkitdirectory', 'true');
            } else {
                Main_File_Uploader.removeAttribute('webkitdirectory');
            }
        }

        // @ processMainFile
        // This function is called when the main data file is uploaded.
        // It stores the file, determines its type, runs FastQC if applicable, then unlocks the next step.
        function processMainFile() {

            if (typeDropdown.value === 'BCL') {
                // If it's a directory, this should be a BCL folder.
                fileTypeCheck.textContent = 'BCL files detected';
                handleBCL(Main_File_Uploader.files);
                // Leave everything on
                InfoSteps = [1, 1, 1, 1, 1, 1];
                UploadedFileType = 'BCL';
                if (input_type === 'DNA') {
                    continue_button.disabled = false;
                } else {
                    // NOTE: Return here for RNA
                }
                return;
            }

            // check for upload validity
            if (Main_File_Uploader.files.length > 1) {
                // provide error
                console.log('Please select only one file.');
                return;
            }
            // If the file somehow doesn't exist, abort process
            uploadedFile = Main_File_Uploader.files[0];
            if (!uploadedFile) {
                return;
            }
            // Store the file path for later
            // NOTE: Gotta actually put this somewhere
            const filePath = uploadedFile.path;

            // If it's not a directory, it's a file
            // Determine the type
            const fileExtension = uploadedFile.name.split('.').pop().toLowerCase();
            fileTypeCheck.textContent = '.' + fileExtension + ' file detected';
            let trimmed = false;
            switch (fileExtension) {
                case 'bam':
                    // No processing, Cleaning BAM is required
                    InfoSteps = [0, 0, 0, 0, 0, 2];
                    UploadedFileType = 'BAM';
                    
                    // if input type is DNA enable the continue button
                    if (input_type === 'DNA') {
                        continue_button.disabled = false;
                    }
                    return;
                case 'sam':
                    // No processing, Convert to BAM is required, Clean BAM is optional
                    InfoSteps = [0, 0, 0, 0, 2, 1];
                    UploadedFileType = 'SAM';
                    // if input type is DNA enable the continue button
                    if (input_type === 'DNA') {
                        continue_button.disabled = false;
                    }
                    return;
                case 'fastq':
                    // Leave all of the steps on
                    InfoSteps = [1, 1, 1, 1, 1, 1];
                    UploadedFileType = 'FastQ';

                    // run fastQC
                    runFastQC(uploadedFile)
                        .then(analysis => {
                            trimmed = analysis.trimmed;
                            // check for demultiplexing
                            if (!analysis.demultiplexed) {
                                // still multiplexed? Set Demultiplexing to required
                                InfoSteps[3] = 2;
                            }
                        })
                        .catch(error => {
                            // Handle any errors
                            console.error('Error analyzing file:', error);
                        });
                    break;
                case 'fasta':
                case 'fast5':
                    // NOTE: Nothing yet, come back to this after meeting
                    break;
                default:
                    // provide error
                    console.log('Provided file is not one of the supported file types.');
            }

            // Set the adapter text/variable and uploader enabled settings accordingly
            if (trimmed) {
                adapterSection.hidden = false;
                ACHeading.textContent = 'Your data appears to have an adapter applied. Please upload an adapter file.'
                adapterFileInput.disabled = false;
            } else {
                ACHeading.textContent = 'We found no adapters on your file.'
                adapterFileInput.disabled = true;
                // if input type is DNA and there are no adapters, enable the continue button
                if (input_type === 'DNA') {
                    continue_button.disabled = false;
                }
            }

        }

        // @ handleBCL
        // This function takes in a BCL File folder, converts it to fastQ, runs fastQC, and returns trimming and multiplexing information
        function handleBCL (BCLFiles) {
            const formData = new FormData();
            for (const file of BCLFiles) {
                formData.append('files', file);
            }

            // Run Bcl2FastQ
            return new Promise((resolve, reject) => {
            fetch('/run-bcl2fastq', {
                method: 'POST',
                body: formData,
            })
                .then(response => response.json()) // Assume the server sends JSON data
                .then(data => {
                    resolve();
                    // // store the folder of the original file
                    // uploadedFile = data.BCLfolder;
                    // // Run fastQC on the returned file
                    // runFastQC(data.fastQFile)
                    //     .then(analysis => {
                    //         resolve({trimmed: analysis.trimmed, demultiplexed: analysis.demultiplexed});
                    //     })
                    //     .catch(error => {
                    //         // Handle any errors
                    //         console.error('Error analyzing file:', error);
                    //     });
                })
                .catch(error => {
                    console.error('Error:', error);
                    reject(error);
                });
            });
        }

        // @ runFastQC
        // This function takes in a fastQ file and runs fastQC on that file
        // Returns:
        //      - a boolean that indicates whether the adapter is trimmed
        //      - a boolean that indicates wether the fastQ file is demultiplexed
        function runFastQC (fastQFile) {
            const formData = new FormData();
            formData.append('file', fastQFile);

            return new Promise((resolve, reject) => {
            // Make an asynchronous request to the server using the Fetch API
            fetch('/run-fastqc', {
                method: 'POST',
                body: formData,
            })
                .then(response => response.json()) // Assume the server sends JSON data
                .then(data => {
                    // return the Adapter Trim bool and the multiplexed bool based on the response
                    resolve({ trimmed: data.trimmed, demultiplexed: data.demultiplexed });
                })
                .catch(error => {
                    console.error('Error:', error);
                    reject(error);
                });
            });
        }

       

        // If an adapter file is uploaded...
        // nothing to do! just send it to the backend
        // and set up a listener to activate the continue button if input type is DNA
        adapterUploadButton.addEventListener('click', function () {
            if (input_type === 'DNA') {
                continue_button.disabled = false;
            }
        });

        // If a genome file is uploaded...
        function processGenomeFile() {
            const RNA_Genome_Uploader = document.getElementById('RNA_Genome_Uploader');
            const genomeFormData = new FormData();

            for (const file of RNA_Genome_Uploader.files) {
                genomeFormData.append('files', file);
            }

            // Make an asynchronous request to the server using the Fetch API
            fetch('/main-file-upload', {
                method: 'POST',
                body: genomeFormData,
            })
                .then(response => response.json()) // Assume the server sends JSON data
                .then(data => {
                    // have the backend check if it's a transcriptome or not
                    // set that variable and the info text, then activate the continue button
                    const type = data.type;
                    genomeTypeInfo.textContent = 'Genome type: ${genomeTypeInfo}';
                    continue_button.disabled = false;

                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }


        // Continue button submit form
        function submitForm() {

            // Set the values of the hidden input fields
            document.getElementById('infoStepsInput').value = JSON.stringify(InfoSteps);
            document.getElementById('uploadedFileInput').value = uploadedFile;
            document.getElementById('uploadedFileTypeInput').value = UploadedFileType;

            // console.log("InfoSteps: ", InfoSteps);
            // console.log("uploadedFile: ", uploadedFile);
            // console.log("uploadedFileType: ", UploadedFileType);

            // Submit the form
            document.getElementById('continueForm').submit();
        }

    </script>

</body>

</html>